package camera;

import java.io.FileNotFoundException;
import java.util.LinkedList;

import comm.DifusionMulticast;

import khepera.escenario.Escenario;

import corba.camara.IPYPortD;
import corba.camara.ListaSuscripcionD;
import corba.camara.suscripcionD;
import corba.consola.ConsolaInt;
import corba.consola.ConsolaIntHelper;
import corba.instantanea.EstadoRobotD;
import corba.instantanea.EstadoRobotDHelper;
import corba.instantanea.EstadoRobotDHolder;
import corba.instantanea.InstantaneaD;
import corba.khepera.escenario.EscenarioD;
import corba.robot.RobotSeguidorInt;
import corba.robot.RobotSeguidorIntHelper;

/**
 * This class is the implemetation object for your IDL interface.
 *
 * Let the Eclipse complete operations code by choosing 'Add unimplemented methods'.
 */
public class CamaraIntServerImpl extends corba.camara.CamaraIntPOA {

	org.omg.CORBA.ORB orb;

	private LinkedList<String> listaConsolas = new LinkedList<String>();
	private LinkedList<String> listaRobots = new LinkedList<String>();
	private LinkedList<String> bufferRobots = new LinkedList<String>();
	private LinkedList<String> listaFallos = new LinkedList<String>();
	private LinkedList<EstadoRobotD> listaEstados = new LinkedList<EstadoRobotD>();
	private int numConsolas;
	private int numRobots;
	private Escenario escenario;
	//private EscenarioD escenarioD;

	IPYPortD ipyport;

	/**
	 * Constructor for CamaraIntServerImpl 
	 */
	public CamaraIntServerImpl() {
		try {
			escenario = new Escenario("dibujo");
		} catch (FileNotFoundException e) {
			System.out.println("Couldn't find dibujo file");
			e.printStackTrace();
		}
	}

	@Override
	public synchronized void BajaConsola(String arg0) {
		// Remove the console ref
		listaConsolas.remove(arg0);
	}

	@Override
	public synchronized void BajaRobot(String arg0) {
		// Remove the robot ref
		listaRobots.remove(arg0);
	}

	@Override
	public void ModificarEscenario(EscenarioD arg0) {
		escenario = new Escenario(arg0);

		// Notify robots and consoles
		for (String c : listaConsolas) {
			ConsolaInt cI = ConsolaIntHelper.narrow(orb.string_to_object(c));
			cI.ModificarEscenario(escenario.toEscenarioD());
		}

		for (String r : listaRobots) {
			RobotSeguidorInt rI = RobotSeguidorIntHelper.narrow(orb.string_to_object(r));
			rI.ModificarEscenario(escenario.toEscenarioD());
		}

	}

	@Override
	public EscenarioD ObtenerEscenario() {
		return escenario.toEscenarioD();
	}

	@Override
	public IPYPortD ObtenerIPYPortDifusion() {
		return ipyport;
	}

	@Override
	public InstantaneaD ObtenerInstantanea() {
		return new InstantaneaD(listaEstados.toArray(new EstadoRobotD[0]));	
	}

	@Override
	public ListaSuscripcionD ObtenerLista() {

		return new ListaSuscripcionD(listaRobots.toArray(new String[0]), listaConsolas.toArray(new String[0]));
	}

	@Override
	public synchronized suscripcionD SuscribirConsola(String arg0) {

		suscripcionD consolaSubscription;
		listaConsolas.add(arg0);

		consolaSubscription = new suscripcionD(numConsolas,ipyport, escenario.toEscenarioD());
		numConsolas++;

		return consolaSubscription;
	}

	@Override
	public synchronized suscripcionD SuscribirRobot(String arg0) {

		synchronized(bufferRobots) {
			suscripcionD robotSubscription;
			bufferRobots.add(arg0);
			robotSubscription = new suscripcionD(numRobots, ipyport, escenario.toEscenarioD());
			numRobots++;
			return robotSubscription;
		}
	}

	public class camaraDifusion extends Thread{

		private EstadoRobotDHolder estadoRobotHolder = new EstadoRobotDHolder();

		public camaraDifusion() {

		}

		@Override
		public void run() {

			DifusionMulticast difusion = new DifusionMulticast(ipyport);

			while(true) {
				listaEstados.clear();
				listaFallos.clear();
				
				// Add robots from buffer
				synchronized(bufferRobots){
					for (String b : bufferRobots){
						listaRobots.add(b);
					}	
				// Empty buffer safely
				bufferRobots.clear();
				}
				
				for (String r : listaRobots) {	
					RobotSeguidorInt rI = RobotSeguidorIntHelper.narrow(orb.string_to_object(r));
					try {
						rI.ObtenerEstado(estadoRobotHolder);
						listaEstados.add(estadoRobotHolder.value);
					} catch(Exception e) {
						listaFallos.add(r);
					}
				}

				// difusion
				difusion.sendObject(new InstantaneaD(listaEstados.toArray(new EstadoRobotD[0])));
				// quitar fallos
				listaRobots.removeAll(listaFallos);

				try {
					Thread.sleep(500);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}

	}

	public void start() {
		camaraDifusion cD = new camaraDifusion();
		cD.start();
	}
}
